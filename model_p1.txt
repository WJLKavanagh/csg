[flip_coin]	turn = 0 & p2_sum < 2*health_ceiling			-> 0.5 : (turn' = 1) + 0.5 : (turn' = 2);				// If an opposing pair has been chosen, choose first mover

// P1:
[p1_K_K] 	attack = 0 & turn = 1 & p1K > 0 & p1_stun != 1 & p2K > 0 -> (attack' = 1) & (p1_stun' = 0);
[p1_K_A]	attack = 0 & turn = 1 & p1K > 0 & p1_stun != 1 & p2A > 0 -> (attack' = 2) & (p1_stun' = 0);
[p1_K_W]	attack = 0 & turn = 1 & p1K > 0 & p1_stun != 1 & p2W > 0 -> (attack' = 3) & (p1_stun' = 0);
[p1_A_K]	attack = 0 & turn = 1 & p1A > 0 & p1_stun != 2 & p2K > 0 & p2A = 0 & p2W = 0 -> (attack' = 4) & (p1_stun' = 0);
[p1_A_A]	attack = 0 & turn = 1 & p1A > 0 & p1_stun != 2 & p2K = 0 & p2A > 0 & p2W = 0 -> (attack' = 5) & (p1_stun' = 0);
[p1_A_W]	attack = 0 & turn = 1 & p1A > 0 & p1_stun != 2 & p2K = 0 & p2A = 0 & p2W > 0 -> (attack' = 6) & (p1_stun' = 0);
[p1_A_KA]	attack = 0 & turn = 1 & p1A > 0 & p1_stun != 2 & p2K > 0 & p2A > 0 & p2W = 0 -> (attack' = 7) & (p1_stun' = 0);
[p1_A_KW]	attack = 0 & turn = 1 & p1A > 0 & p1_stun != 2 & p2K > 0 & p2A = 0 & p2W > 0 -> (attack' = 8) & (p1_stun' = 0);
[p1_A_AW]	attack = 0 & turn = 1 & p1A > 0 & p1_stun != 2 & p2K = 0 & p2A > 0 & p2W > 0 -> (attack' = 9) & (p1_stun' = 0);
[p1_W_K]	attack = 0 & turn = 1 & p1W > 0 & p1_stun != 3 & p2K > 0 -> (attack' = 10) & (p1_stun' = 0);
[p1_W_A]	attack = 0 & turn = 1 & p1W > 0 & p1_stun != 3 & p2A > 0 -> (attack' = 11) & (p1_stun' = 0);
[p1_W_W]	attack = 0 & turn = 1 & p1W > 0 & p1_stun != 3 & p2W > 0 -> (attack' = 12) & (p1_stun' = 0);
[p1_skip]	attack = 0 & turn = 1 & p1_sum > 0 & (p1K = 0 | p1_stun = 1) & (p1A = 0 | p1_stun = 2) & (p1W = 0 | p1_stun = 3)->
       (p1_stun' = 0) & (turn' = 2);
